/*
La classe set permet d'organiser nos objets en collections. Ex : ennemies, projectiles, powerups.
Un set doit pouvoir :
	- être crée
	- ajouter des éléments
	- supprimer des éléments
	- afficher ses éléments
	- effacer ses éléments
	- mettre à jour ses éléments.
*/

function set(){
	this.tab;
}

set.prototype.init = function(){
	this.tab = new Array();
}
set.prototype.add = function(object){
	this.tab.push(object);
}

set.prototype.remove = function(){
	this.tab.map(function(obj,index,array){
            if(obj.exists == false ||obj.x >ArenaWidth || obj.x<0){
                  delete array[index];
            }
        });
    }
}

set.prototype.draw = function(){
	this.tab.map(function(obj){
            obj.draw();
        });
}

set.prototype.clear = function(){
	this.tab.map(function(obj){
            obj.clear();
        });
}

set.prototype.clear = function(){
	this.tab.map(function(obj){
            obj.update();
        });
         this.remove();
}

//Set n'a pas de sous-classes, seulement des instances :
enemySet = new set();
projectileSet = new set();
powerUpSet = new set();



/*
Classe de base : gameObject, qui aura pour sous-classes le joueur, les ennemis, les powerups, les projectiles, etc.
Un gameObject doit pouvoir :
	- entrer en collision
	- être initialisé
	- créé
	- supprimé
	- dessiner
	- effacer
	- mis à jour
*/

function gameObject(x,y,speed){
	this.x = x,	
	this.y = y,
	this.xSpeed = speed,
	this.ySpeed = spped,
	this.exists = true,
}

gameObject.prototype.collision = function(tabOfObjects){
	var hits = null;
	var index;
	for(index in tabOfObjects){
		if (this.x < tabOfObjects[index].x + tabOfObjects[index].width &&
			this.x + this.width > tabOfObjects[index].x &&
			this.y < tabOfObjects[index].y + tabOfObjects[index].height &&
			this.height + this.y > tabOfObjects[index].y) {
				// collision detected!
				hits = tabOfObjects[index];
				break;
		}
	}
	return hits;
}

gameObject.prototype.draw = function(){}
gameObject.prototype.clear = function(){}
gameObject.prototype.update = function(){}

/*
La classe character est une sous-classe de gameObject. Elle comprend deux sous-classes player et enemy.
En plus d'un gameObject, un character a :
	- un nombre de vies
	- la possibilité de tirer
	- un set de projectile
	- la possibilité d'exploser
*/

function character(){
	this.cpt = 0,
    this.cptExplosion =  0,//10 images
    this.imgExplosion = new Image(),
    this.imgExplosionHeight = 128,
    this.imgExplosionWidth = 128,
    this.imgExplosion.src = "./assets/Explosion/explosionSpritesheet_1280x128.png",
	this.life = 3
	this.projectileSet = new set();
}

character.prototype = new gameObject;
character.prototype.explodes = function{}{
	this.life --;
    if (this.life<=0) this.cptExplosion = 1;
}

character.prototype.fire = function{}{
	var tmp = new Projectile(this.x-10,this.y+this.height/2,-4,10,5,"rgb(0,200,0)");
    this.projectileSet.add(tmp);
}
